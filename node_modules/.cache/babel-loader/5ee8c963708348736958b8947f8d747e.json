{"ast":null,"code":"import { useCallback as t } from \"react\";\nimport e from \"zustand\";\nimport { redux as o } from \"zustand/middleware\";\nconst r = (t, e) => {\n    if (!t.includes(e)) throw new Error(`'${e}' not found. It must be provided in initialState as a property key.`);\n  },\n  n = o => {\n    const n = e(() => o),\n      s = Object.keys(o),\n      a = (t, e) => {\n        \"production\" !== process.env.NODE_ENV && r(s, t), n.setState(o => {\n          return {\n            [t]: (r = o[t], n = e, \"function\" == typeof n ? n(r) : n)\n          };\n          var r, n;\n        });\n      };\n    return {\n      useGlobalState: e => {\n        \"production\" !== process.env.NODE_ENV && r(s, e);\n        const o = t(t => t[e], [e]);\n        return [n(o), t(t => a(e, t), [e])];\n      },\n      getGlobalState: t => (\"production\" !== process.env.NODE_ENV && r(s, t), n.getState()[t]),\n      setGlobalState: a\n    };\n  },\n  s = function (r) {\n    let n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : r(void 0, {\n      type: void 0\n    });\n    let a = arguments.length > 2 ? arguments[2] : undefined;\n    if (a) return a(s)(r, n);\n    const i = e(o(r, n)),\n      u = Object.keys(n),\n      c = e => {\n        \"production\" !== process.env.NODE_ENV && ((t, e) => {\n          if (!t.includes(e)) throw new Error(`'${e}' not found. It must be provided in initialState as a property key.`);\n        })(u, e);\n        const o = t(t => t[e], [e]);\n        return i(o);\n      };\n    return {\n      useStoreState: c,\n      useGlobalState: e => (\"production\" !== process.env.NODE_ENV && console.warn(\"[DEPRECATED] useStoreState instead\"), [c(e), t(t => {\n        i.setState(o => {\n          return {\n            [e]: (r = o[e], n = t, \"function\" == typeof n ? n(r) : n)\n          };\n          var r, n;\n        });\n      }, [e])]),\n      getState: i.getState,\n      dispatch: i.dispatch\n    };\n  };\nexport { n as createGlobalState, s as createStore };","map":{"version":3,"mappings":";;;AAIA,MAAsBA,IAAG,CAACC,GAAgBC;IACxC,KAAKD,EAAKE,SAASD,IACjB,MAAUE,cAAUF,uEACrB;EAAA;EA2BUG,IAA2CC;IACtD,MAAMC,IAAWC,EAAc,MAAMF;MAG3BL,IAAGQ,OAAOR,KAAKK;MAEnBI,IAAiB,CACrBR,GACAS;QAE6B,iBAAzBC,QAAQC,IAAIC,YACdd,EAAiBC,GAAMC,IAEzBK,EAASQ,SAAUC;UAAD;YAChBd,CAACA,KApCqBe,IAoCED,EAAcd,IApCCgB,IAoCUP,GAtCY,qBAGtDO,IAAYA,EAASD,KAAYC;UAAAA;UAD1B,IAAQD,GAAiBC,CAmCzC;QAAA;MAAA;IAyBF,OAAO;MACLC,gBArBkDjB;QACrB,iBAAzBU,QAAQC,IAAIC,YACdd,EAAiBC,GAAMC;QAEzB,MAAckB,IAAGC,EAAaC,KAAiBA,EAAMpB,IAAW,CAACA;QAMjE,OAAO,CALcK,EAASa,IACdC,EACbE,KAAuCb,EAAeR,GAAUqB,IACjE,CAACrB,IAEI;MAAA;MAYPsB,gBATkDtB,MACrB,iBAAzBU,QAAQC,IAAIC,YACdd,EAAiBC,GAAMC,IAElBK,EAASkB,WAAWvB;MAM3BQ;IAAAA,CAHK;EAAA;ECzBIgB,IAAc,UACzBC,GAEAC;IAAAA,IADAtB,wEAAuBqB,OAAgBE,GAAW;MAAEC,WAAMD;IAAAA;IAAAA,IAC1DD;IAEA,IAAIA,GAAU,OAAOA,EAASF,EAATE,CAAsBD,GAASrB;IAEpD,MAAcC,IAAGC,EAAOuB,EAAMJ,GAASrB;MAAAA,IAI1BG,OAAOR,KAAKK;MAEN0B,IAAgC9B;QACpB,iBAAzBU,QAAQC,IAAIC,YAlDK,EAACb,GAAgBC;UACxC,KAAKD,EAAKE,SAASD,IACjB,MAAUE,cAAUF,uEACrB;QAAA,GAgDoBD,GAAMC;QAEzB,MAAckB,IAAGC,EACdC,KAAsBA,EAAMpB,IAC7B,CAACA;QAEH,OAAOK,EAASa,EAAD;MAAA;IAoBjB,OAAO;MACLY;MACAb,gBAnBkDjB,MACrB,iBAAzBU,QAAQC,IAAIC,YAEdmB,QAAQC,KAAK,uCAWR,CATcF,EAAc9B,IACnBmB,EACbV;QACCJ,EAASQ,SAAUC;UAAmB;YACpCd,CAACA,KA7DiBe,IA6DMD,EAAcd,IA7DHgB,IA6DcP,GA/DQ,qBAGtDO,IAAYA,EAASD,KAAYC;UAAAA;UAD1B,IAAQD,GAAiBC,CA4DrC;QAAA;MAAA,GAIF,CAAChB;MAQHuB,UAAUlB,EAASkB;MACnBU,UAAU5B,EAAS4B;IAAAA,CAJd;EAAA;AAAA","names":["validateStateKey","keys","stateKey","includes","Error","createGlobalState","initialState","useStore","create","Object","setGlobalState","update","process","env","NODE_ENV","setState","previousState","oldValue","newValue","useGlobalState","selector","useCallback","state","u","getGlobalState","getState","createStore","reducer","enhancer","undefined","type","redux","useStoreState","console","warn","dispatch"],"sources":["/Users/kaismac/Tech/synote/node_modules/react-hooks-global-state/src/createGlobalState.ts","/Users/kaismac/Tech/synote/node_modules/react-hooks-global-state/src/createStore.ts"],"sourcesContent":["import { SetStateAction, useCallback } from 'react';\n\nimport create from 'zustand';\n\nconst validateStateKey = (keys: string[], stateKey: string) => {\n  if (!keys.includes(stateKey)) {\n    throw new Error(`'${stateKey}' not found. It must be provided in initialState as a property key.`);\n  }\n};\n\nconst isFunction = (fn: unknown): fn is Function => (typeof fn === 'function');\n\nconst updateValue = <Value>(oldValue: Value, newValue: SetStateAction<Value>) => (\n  isFunction(newValue) ? newValue(oldValue) : newValue\n);\n\n/**\n * Create a global state.\n *\n * It returns a set of functions\n * - `useGlobalState`: a custom hook works like React.useState\n * - `getGlobalState`: a function to get a global state by key outside React\n * - `setGlobalState`: a function to set a global state by key outside React\n *\n * @example\n * import { createGlobalState } from 'react-hooks-global-state';\n *\n * const { useGlobalState } = createGlobalState({ count: 0 });\n *\n * const Component = () => {\n *   const [count, setCount] = useGlobalState('count');\n *   ...\n * };\n */\nexport const createGlobalState = <State extends object>(initialState: State) => {\n  const useStore = create<State>(() => initialState);\n\n  type StateKeys = keyof State;\n  const keys = Object.keys(initialState);\n\n  const setGlobalState = <StateKey extends StateKeys>(\n    stateKey: StateKey,\n    update: SetStateAction<State[StateKey]>,\n  ) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    useStore.setState((previousState) => ({\n      [stateKey]: updateValue(previousState[stateKey], update),\n    } as Pick<State, StateKey> as Partial<State>));\n  };\n\n  const useGlobalState = <StateKey extends StateKeys>(stateKey: StateKey) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    const selector = useCallback((state: State) => state[stateKey], [stateKey]);\n    const partialState = useStore(selector);\n    const updater = useCallback(\n      (u: SetStateAction<State[StateKey]>) => setGlobalState(stateKey, u),\n      [stateKey],\n    );\n    return [partialState, updater] as const;\n  };\n\n  const getGlobalState = <StateKey extends StateKeys>(stateKey: StateKey) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    return useStore.getState()[stateKey];\n  };\n\n  return {\n    useGlobalState,\n    getGlobalState,\n    setGlobalState,\n  };\n};\n","/* eslint @typescript-eslint/no-explicit-any: off */\n\nimport { Reducer, SetStateAction, useCallback } from 'react';\n\nimport create from 'zustand';\nimport { redux } from 'zustand/middleware';\n\ntype ExtractState<S> = S extends {\n  getState: () => infer T;\n} ? T : never;\n\nconst validateStateKey = (keys: string[], stateKey: string) => {\n  if (!keys.includes(stateKey)) {\n    throw new Error(`'${stateKey}' not found. It must be provided in initialState as a property key.`);\n  }\n};\n\nconst isFunction = (fn: unknown): fn is Function => (typeof fn === 'function');\n\nconst updateValue = <Value>(oldValue: Value, newValue: SetStateAction<Value>) => (\n  isFunction(newValue) ? newValue(oldValue) : newValue\n);\n\n/**\n * Create a global store.\n *\n * It returns a set of functions\n * - `useStoreState`: a custom hook to read store state by key\n * - `getState`: a function to get store state by key outside React\n * - `dispatch`: a function to dispatch an action to store\n *\n * A store works somewhat similarly to Redux, but not the same.\n *\n * @example\n * import { createStore } from 'react-hooks-global-state';\n *\n * const initialState = { count: 0 };\n * const reducer = ...;\n *\n * const store = createStore(reducer, initialState);\n * const { useStoreState, dispatch } = store;\n *\n * const Component = () => {\n *   const count = useStoreState('count');\n *   ...\n * };\n */\nexport const createStore = <State extends object, Action extends { type: unknown }>(\n  reducer: Reducer<State, Action>,\n  initialState: State = (reducer as any)(undefined, { type: undefined }),\n  enhancer?: any,\n): Store<State, Action> => {\n  if (enhancer) return enhancer(createStore)(reducer, initialState);\n\n  const useStore = create(redux(reducer, initialState));\n\n  type BoundState = ExtractState<typeof useStore>;\n  type StateKeys = keyof BoundState;\n  const keys = Object.keys(initialState);\n\n  const useStoreState = <StateKey extends StateKeys>(stateKey: StateKey) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    const selector = useCallback(\n      (state: BoundState) => state[stateKey],\n      [stateKey],\n    );\n    return useStore(selector);\n  };\n\n  const useGlobalState = <StateKey extends StateKeys>(stateKey: StateKey) => {\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.warn('[DEPRECATED] useStoreState instead');\n    }\n    const partialState = useStoreState(stateKey);\n    const updater = useCallback(\n      (update: SetStateAction<BoundState[StateKey]>) => {\n        useStore.setState((previousState) => ({\n          [stateKey]: updateValue(previousState[stateKey], update),\n        } as Pick<BoundState, StateKey> as Partial<BoundState>));\n      },\n      [stateKey],\n    );\n    return [partialState, updater] as const;\n  };\n\n  return {\n    useStoreState,\n    useGlobalState,\n    getState: useStore.getState,\n    dispatch: useStore.dispatch,\n  } as unknown as Store<State, Action>;\n};\n\ntype Store<State, Action> = {\n  useStoreState: <StateKey extends keyof State>(stateKey: StateKey) => State[StateKey];\n  /**\n   * useGlobalState created by createStore is deprecated.\n   *\n   * @deprecated useStoreState instead\n   */\n  useGlobalState: <StateKey extends keyof State>(stateKey: StateKey) => readonly [\n    State[StateKey],\n    (u: SetStateAction<State[StateKey]>) => void,\n  ];\n  getState: () => State;\n  dispatch: (action: Action) => Action;\n};\n"]},"metadata":{},"sourceType":"module"}